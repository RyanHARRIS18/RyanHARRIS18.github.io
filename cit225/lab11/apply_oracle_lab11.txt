SQL> 
SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #1
SQL> --  -------
SQL> --  This step requires that you use the query from Lab #10 that you used
SQL> -- to insert records into the RENTAL table. You need to put it inside the
SQL> -- USING clause of the MERGE statement as the query, resolve which columns
SQL> -- you use in an UPDATE statement, and resolve which columns you use in an
SQL> -- INSERT statement.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Insert step #1 statements here.
SQL> 
SQL> -- --------------------------------------------------------
SQL> 
SQL> MERGE INTO rental target
  2  USING (
  3   SELECT   DISTINCT
  4  		  r.rental_id
  5  	 ,	  c.contact_id
  6  	 ,	  tu.check_out_date AS check_out_date
  7  	 ,	  tu.return_date AS return_date
  8  	 ,	  1 AS created_by
  9  	 ,	  TRUNC(SYSDATE) AS creation_date
 10  	 ,	  1 AS last_updated_by
 11  	 ,	  TRUNC(SYSDATE) AS last_update_date
 12  	 FROM	  member m INNER JOIN contact c
 13  	 ON m.member_id = c.member_id INNER JOIN transaction_upload tu
 14  	 ON c.first_name = tu.first_name
 15  	 AND	    NVL(c.middle_name, 'x') = NVL(tu.middle_name, 'x')
 16  	 AND	    c.last_name = tu.last_name
 17  	 AND	    tu.account_number = m.account_number LEFT JOIN rental r
 18  	 ON	    c.contact_id = r.customer_id
 19  	 AND	    TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 20  	 AND	    TRUNC(tu.return_date) = TRUNC(r.return_date)
 21  	 ) source
 22  ON (target.rental_id = source.rental_id)
 23  WHEN MATCHED THEN
 24  UPDATE SET last_updated_by = source.last_updated_by
 25  ,		last_update_date = source.last_update_date
 26  WHEN NOT MATCHED THEN
 27  INSERT VALUES
 28  ( rental_s1.NEXTVAL
 29  , source.contact_id
 30  , source.check_out_date
 31  , source.return_date
 32  , source.created_by
 33  , source.creation_date
 34  , source.last_updated_by
 35  , source.last_update_date);

4681 rows merged.

SQL> 
SQL> SELECT   TO_CHAR(COUNT(*),'99,999') AS "Rental after merge"
  2  FROM     rental;

Rental                                                                          
-------                                                                         
  4,689                                                                         

1 row selected.

SQL> 
SQL> 
SQL> /*Rental after merge

Rental                                                                          
-------                                                                         
  4,689                                                                         

1 row selected.

SQL> ------------------
SQL> 		  4,689
SP2-0042: unknown command "4,689" - rest of line ignored.
SQL> 
SQL> 1 row selected.*/
SQL> 
SQL> --  Step #2
SQL> --  -------
SQL> 	 /* This step requires that the preceding MERGE statement
SQL> 	 ran successfully and that you use the query from Lab #10
SQL> 	 that you used to insert records into the RENTAL_ITEM table.
SQL> 	 You need to put it inside the USING clause of the MERGE
SQL> 	 statement as the query, resolve which columns you use in
SQL> 	 an UPDATE statement, and resolve which columns you use
SQL> 	 in an INSERT statement. */
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Insert step #2 statements here.
SQL> 
SQL> -- --------------------------------------------------------
SQL> 
SQL> 
SQL> MERGE INTO rental_item target
  2  USING (
  3  SELECT
  4  		  ri.rental_item_id
  5  	 ,	  r.rental_id
  6  	 ,	  tu.item_id
  7  	 ,	  1001 AS created_by
  8  	 ,	  TRUNC(SYSDATE) AS creation_date
  9  	 ,	  1001 AS last_updated_by
 10  	 ,	  TRUNC(SYSDATE) AS last_update_date
 11  	 ,	  TRUNC(r.return_date) - TRUNC(r.check_out_date) AS rental_item_price
 12  	 ,	  cl.common_lookup_id AS rental_item_type
 13  	 FROM	  member m INNER JOIN contact c
 14  		 ON	  m.member_id = c.member_id INNER JOIN transaction_upload tu
 15  		 ON	  c.first_name = tu.first_name
 16  		 AND	  NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 17  		 AND	  c.last_name = tu.last_name
 18  		 LEFT JOIN rental r
 19  		 ON	  c.contact_id = r.customer_id
 20  		 AND	  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 21  		 AND	  TRUNC(tu.return_date) = TRUNC(r.return_date)
 22  		 INNER JOIN common_lookup cl
 23  		 ON   cl.common_lookup_table = 'RENTAL_ITEM'
 24  		 AND	 cl.common_lookup_column = 'RENTAL_ITEM_TYPE'
 25  		 AND	 cl.common_lookup_type = tu.rental_item_type
 26  		 LEFT JOIN rental_item ri
 27  		 ON r.rental_id = ri.rental_id) source
 28  ON (target.rental_item_id = source.rental_item_id)
 29  WHEN MATCHED THEN
 30  UPDATE SET last_updated_by = source.last_updated_by
 31  ,		last_update_date = source.last_update_date
 32  WHEN NOT MATCHED THEN
 33  INSERT VALUES
 34  ( rental_item_s1.nextval
 35  , source.rental_id
 36  , source.item_id
 37  , source.created_by
 38  , source.creation_date
 39  , source.last_updated_by
 40  , source.last_update_date
 41  , source.rental_item_price
 42  , source.rental_item_type);

11520 rows merged.

SQL> 
SQL> SELECT   TO_CHAR(COUNT(*),'99,999') AS "Rental Item after merge"
  2  FROM     rental_item;

Rental                                                                          
-------                                                                         
 11,533                                                                         

1 row selected.

SQL> 
SQL> 
SQL> --  Step #3
SQL> --  -------
SQL> --  Using the query from Lab 10, Step 3, insert the query
SQL> --  in the MERGE statement to the TRANSACTION table.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Insert step #3 statements here.
SQL> 
SQL> -- --------------------------------------------------------
SQL> 
SQL> MERGE INTO transaction target
  2  USING (
  3  SELECT   t.transaction_id
  4  	 ,	  tu.payment_account_number AS transaction_account
  5  	 ,	  cl1.common_lookup_id AS transaction_type
  6  	 ,	  TRUNC(tu.transaction_date) AS transaction_date
  7  	 ,	 (SUM(tu.transaction_amount) / 1.06) AS transaction_amount
  8  	 ,	  r.rental_id
  9  	 ,	  cl2.common_lookup_id AS payment_method_type
 10  	 ,	  m.credit_card_number AS payment_account_number
 11  	 ,	  1001 AS created_by
 12  	 ,	  TRUNC(SYSDATE) AS creation_date
 13  	 ,	  1001 AS last_updated_by
 14  	 ,	  TRUNC(SYSDATE) AS last_update_date
 15  	 FROM	  member m INNER JOIN contact c
 16  		 ON	  m.member_id = c.member_id INNER JOIN transaction_upload tu
 17  		 ON	  c.first_name = tu.first_name
 18  		 AND	  NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 19  		 AND	  c.last_name = tu.last_name
 20  		 INNER JOIN rental r
 21  		 ON	  c.contact_id = r.customer_id
 22  		 AND	  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 23  		 AND	  TRUNC(tu.return_date) = TRUNC(r.return_date)
 24  		 INNER JOIN common_lookup cl1
 25  		 ON   cl1.common_lookup_table = 'TRANSACTION'
 26  		 AND	  cl1.common_lookup_column = 'TRANSACTION_TYPE'
 27  		 AND	 cl1.common_lookup_type = tu.transaction_type
 28  		 INNER JOIN common_lookup cl2
 29  		 ON	 cl2.common_lookup_table = 'TRANSACTION'
 30  		 AND	 cl2.common_lookup_column = 'PAYMENT_METHOD_TYPE'
 31  		 AND	 cl2.common_lookup_type = tu.payment_method_type
 32  		 LEFT JOIN TRANSACTION t
 33  		 ON t.transaction_account = tu.payment_account_number
 34  		 AND t.rental_id = r.rental_id
 35  		 AND t.transaction_type = cl1.common_lookup_id
 36  		 AND t.transaction_date = tu.transaction_date
 37  		 AND t.payment_method_type = cl2.common_lookup_id
 38  		 AND t.payment_account_number = m.credit_card_number
 39  		  GROUP BY t.transaction_id
 40  ,	      tu.payment_account_number
 41  ,	      cl1.common_lookup_id
 42  ,	      tu.transaction_date
 43  ,	      r.rental_id
 44  ,	      cl2.common_lookup_id
 45  ,	      m.credit_card_number
 46  ,	      1
 47  ,	      TRUNC(SYSDATE)
 48  ,	      1
 49  ,	      TRUNC(SYSDATE))
 50  source
 51  ON (target.transaction_id = source.transaction_id)
 52  WHEN MATCHED THEN
 53  UPDATE SET last_updated_by = source.last_updated_by
 54  ,		last_update_date = source.last_update_date
 55  WHEN NOT MATCHED THEN
 56  INSERT VALUES
 57  ( transaction_s1.nextval
 58  , source.TRANSACTION_ACCOUNT
 59  , source.TRANSACTION_TYPE
 60  , source.TRANSACTION_DATE
 61  , source.TRANSACTION_AMOUNT
 62  , source.RENTAL_ID
 63  , source.PAYMENT_METHOD_TYPE
 64  , source.PAYMENT_ACCOUNT_NUMBER
 65  , source.CREATED_BY
 66  , source.CREATION_DATE
 67  , source.LAST_UPDATED_BY
 68  , source.LAST_UPDATE_DATE);

4681 rows merged.

SQL> 
SQL> SELECT   TO_CHAR(COUNT(*),'99,999') AS "Transaction after merge"
  2  FROM     transaction;

Transac                                                                         
-------                                                                         
  4,681                                                                         

1 row selected.

SQL> 
SQL> --  Step #4
SQL> --  -------
SQL> --  Insert the MERGE statements to the RENTAL, RENTAL_ITEM,
SQL> --  and TRANSACTION tables into the UPLOAD_TRANSACTION
SQL> --  procedure; execute the UPLOAD_TRANSACTION procedure,
SQL> --  and query the results from the target tables; and
SQL> --  re-execute the UPLOAD_TRANSACTION procedure to
SQL> --  verify that the query returns the same set and only
SQL> --  inserts new records.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Insert step #4 statements here.
SQL> 
SQL> -- Create a procedure to wrap the transaction.
SQL> 
SQL> -- Create a procedure to wrap the transaction.
SQL> CREATE OR REPLACE PROCEDURE upload_transaction IS
  2  BEGIN
  3    -- Set save point for an all or nothing transaction.
  4    SAVEPOINT starting_point;
  5  
  6  
  7    MERGE INTO rental target
  8  USING (
  9   SELECT   DISTINCT
 10  		  r.rental_id
 11  	 ,	  c.contact_id
 12  	 ,	  tu.check_out_date AS check_out_date
 13  	 ,	  tu.return_date AS return_date
 14  	 ,	  1 AS created_by
 15  	 ,	  TRUNC(SYSDATE) AS creation_date
 16  	 ,	  1 AS last_updated_by
 17  	 ,	  TRUNC(SYSDATE) AS last_update_date
 18  	 FROM	  member m INNER JOIN contact c
 19  	 ON m.member_id = c.member_id INNER JOIN transaction_upload tu
 20  	 ON c.first_name = tu.first_name
 21  	 AND	    NVL(c.middle_name, 'x') = NVL(tu.middle_name, 'x')
 22  	 AND	    c.last_name = tu.last_name
 23  	 AND	    tu.account_number = m.account_number LEFT JOIN rental r
 24  	 ON	    c.contact_id = r.customer_id
 25  	 AND	    TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 26  	 AND	    TRUNC(tu.return_date) = TRUNC(r.return_date)
 27  	 ) source
 28  ON (target.rental_id = source.rental_id)
 29  WHEN MATCHED THEN
 30  UPDATE SET last_updated_by = source.last_updated_by
 31  ,		last_update_date = source.last_update_date
 32  WHEN NOT MATCHED THEN
 33  INSERT VALUES
 34  ( rental_s1.NEXTVAL
 35  , source.contact_id
 36  , source.check_out_date
 37  , source.return_date
 38  , source.created_by
 39  , source.creation_date
 40  , source.last_updated_by
 41  , source.last_update_date);
 42  
 43  
 44  MERGE INTO rental_item target
 45  USING (
 46  SELECT
 47  		  ri.rental_item_id
 48  	 ,	  r.rental_id
 49  	 ,	  tu.item_id
 50  	 ,	  1001 AS created_by
 51  	 ,	  TRUNC(SYSDATE) AS creation_date
 52  	 ,	  1001 AS last_updated_by
 53  	 ,	  TRUNC(SYSDATE) AS last_update_date
 54  	 ,	  TRUNC(r.return_date) - TRUNC(r.check_out_date) AS rental_item_price
 55  	 ,	  cl.common_lookup_id AS rental_item_type
 56  	 FROM	  member m INNER JOIN contact c
 57  		 ON	  m.member_id = c.member_id INNER JOIN transaction_upload tu
 58  		 ON	  c.first_name = tu.first_name
 59  		 AND	  NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 60  		 AND	  c.last_name = tu.last_name
 61  		 LEFT JOIN rental r
 62  		 ON	  c.contact_id = r.customer_id
 63  		 AND	  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 64  		 AND	  TRUNC(tu.return_date) = TRUNC(r.return_date)
 65  		 INNER JOIN common_lookup cl
 66  		 ON   cl.common_lookup_table = 'RENTAL_ITEM'
 67  		 AND	 cl.common_lookup_column = 'RENTAL_ITEM_TYPE'
 68  		 AND	 cl.common_lookup_type = tu.rental_item_type
 69  		 LEFT JOIN rental_item ri
 70  		 ON r.rental_id = ri.rental_id) source
 71  ON (target.rental_item_id = source.rental_item_id)
 72  WHEN MATCHED THEN
 73  UPDATE SET last_updated_by = source.last_updated_by
 74  ,		last_update_date = source.last_update_date
 75  WHEN NOT MATCHED THEN
 76  INSERT VALUES
 77  ( rental_item_s1.nextval
 78  , source.rental_id
 79  , source.item_id
 80  , source.created_by
 81  , source.creation_date
 82  , source.last_updated_by
 83  , source.last_update_date
 84  , source.rental_item_price
 85  , source.rental_item_type);
 86  
 87  MERGE INTO transaction target
 88  USING (
 89  SELECT   t.transaction_id
 90  	 ,	  tu.payment_account_number AS transaction_account
 91  	 ,	  cl1.common_lookup_id AS transaction_type
 92  	 ,	  TRUNC(tu.transaction_date) AS transaction_date
 93  	 ,	 (SUM(tu.transaction_amount) / 1.06) AS transaction_amount
 94  	 ,	  r.rental_id
 95  	 ,	  cl2.common_lookup_id AS payment_method_type
 96  	 ,	  m.credit_card_number AS payment_account_number
 97  	 ,	  1001 AS created_by
 98  	 ,	  TRUNC(SYSDATE) AS creation_date
 99  	 ,	  1001 AS last_updated_by
100  	 ,	  TRUNC(SYSDATE) AS last_update_date
101  	 FROM	  member m INNER JOIN contact c
102  		 ON	  m.member_id = c.member_id INNER JOIN transaction_upload tu
103  		 ON	  c.first_name = tu.first_name
104  		 AND	  NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
105  		 AND	  c.last_name = tu.last_name
106  		 INNER JOIN rental r
107  		 ON	  c.contact_id = r.customer_id
108  		 AND	  TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
109  		 AND	  TRUNC(tu.return_date) = TRUNC(r.return_date)
110  		 INNER JOIN common_lookup cl1
111  		 ON   cl1.common_lookup_table = 'TRANSACTION'
112  		 AND	  cl1.common_lookup_column = 'TRANSACTION_TYPE'
113  		 AND	 cl1.common_lookup_type = tu.transaction_type
114  		 INNER JOIN common_lookup cl2
115  		 ON	 cl2.common_lookup_table = 'TRANSACTION'
116  		 AND	 cl2.common_lookup_column = 'PAYMENT_METHOD_TYPE'
117  		 AND	 cl2.common_lookup_type = tu.payment_method_type
118  		 LEFT JOIN TRANSACTION t
119  		 ON t.transaction_account = tu.payment_account_number
120  		 AND t.rental_id = r.rental_id
121  		 AND t.transaction_type = cl1.common_lookup_id
122  		 AND t.transaction_date = tu.transaction_date
123  		 AND t.payment_method_type = cl2.common_lookup_id
124  		 AND t.payment_account_number = m.credit_card_number
125  		  GROUP BY t.transaction_id
126  ,	      tu.payment_account_number
127  ,	      cl1.common_lookup_id
128  ,	      tu.transaction_date
129  ,	      r.rental_id
130  ,	      cl2.common_lookup_id
131  ,	      m.credit_card_number
132  ,	      1
133  ,	      TRUNC(SYSDATE)
134  ,	      1
135  ,	      TRUNC(SYSDATE))
136  source
137  ON (target.transaction_id = source.transaction_id)
138  WHEN MATCHED THEN
139  UPDATE SET last_updated_by = source.last_updated_by
140  ,		last_update_date = source.last_update_date
141  WHEN NOT MATCHED THEN
142  INSERT VALUES
143  ( transaction_s1.nextval
144  , source.TRANSACTION_ACCOUNT
145  , source.TRANSACTION_TYPE
146  , source.TRANSACTION_DATE
147  , source.TRANSACTION_AMOUNT
148  , source.RENTAL_ID
149  , source.PAYMENT_METHOD_TYPE
150  , source.PAYMENT_ACCOUNT_NUMBER
151  , source.CREATED_BY
152  , source.CREATION_DATE
153  , source.LAST_UPDATED_BY
154  , source.LAST_UPDATE_DATE);
155  
156    -- Save the changes.
157    COMMIT;
158  
159  EXCEPTION
160    WHEN OTHERS THEN
161  	 ROLLBACK TO starting_point;
162  	 RETURN;
163  END;
164  /

Procedure created.

SQL> 
SQL>  EXECUTE upload_transaction;

PL/SQL procedure successfully completed.

SQL> 
SQL>  COLUMN rental_count      FORMAT 99,999 HEADING "Rental|Count"
SQL> COLUMN rental_item_count FORMAT 99,999 HEADING "Rental|Item|Count"
SQL> COLUMN transaction_count FORMAT 99,999 HEADING "Transaction|Count"
SQL> 
SQL> SELECT   il1.rental_count
  2  ,	      il2.rental_item_count
  3  ,	      il3.transaction_count
  4  FROM    (SELECT COUNT(*) AS rental_count FROM rental) il1 CROSS JOIN
  5  	     (SELECT COUNT(*) AS rental_item_count FROM rental_item) il2 CROSS JOIN
  6  	     (SELECT COUNT(*) AS transaction_count FROM TRANSACTION) il3;

         Rental                                                                 
 Rental    Item Transaction                                                     
  Count   Count       Count                                                     
------- ------- -----------                                                     
  4,689  11,533       4,681                                                     

1 row selected.

SQL> 
SQL> 
SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #5
SQL> --  -------
SQL> --  Write a query that uses date functions to report
SQL> --  aggregated transaction amount values for base revenue,
SQL> --  110% of revenue, 120% of revenue, 90% of revenue,
SQL> --  80% or revenue.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Insert step #5 statements here.
SQL>  set linesize 150
SQL> select
  2  	il.month AS "Month Year"
  3  ,	il.base AS "BASE REVENUE"
  4  ,	il.plus10 AS "10 PLUS REVENUE"
  5  ,	il.plus20 AS "20 PLUS REVENUE"
  6  ,	il.only10 AS "10 PLUS DIFF"
  7  , il.only20 AS "20 PLUS DIFF"
  8    from
  9  	   (select
 10   concat(TO_CHAR(t.transaction_date, 'MON'),CONCAT(' ',EXTRACT(YEAR From t.transaction_date))) AS month
 11   , EXTRACT(MONTH From t.transaction_date) AS sortkey
 12   , TO_CHAR(SUM(t.transaction_amount), '$9,999,999.00') AS base
 13   , TO_CHAR(SUM(t.transaction_amount) * 1.1, '$9,999,999.00') AS plus10
 14   , TO_CHAR(SUM(t.transaction_amount) * 1.2, '$9,999,999.00') AS plus20
 15   , TO_CHAR(SUM(t.transaction_amount) * 0.1, '$9,999,999.00') AS only10
 16   , TO_CHAR(SUM(t.transaction_amount) * 0.2, '$9,999,999.00') AS only20
 17  	    FROM transaction t
 18   Where EXTRACT(YEAR FROM t.transaction_date) = 2009
 19   group by concat(TO_CHAR(t.transaction_date, 'MON'),CONCAT(' ',EXTRACT(YEAR FROM t.transaction_date))), EXTRACT(MONTH FROM
 20   t.transaction_date)) il
 21   order by il.sortkey;

Month Year                                            BASE REVENUE   10 PLUS REVENU 20 PLUS REVENU 10 PLUS DIFF   20 PLUS DIFF                        
----------------------------------------------------- -------------- -------------- -------------- -------------- --------------                      
JAN 2009                                                   $2,520.00      $2,772.00      $3,024.00        $252.00        $504.00                      
FEB 2009                                                   $4,029.00      $4,431.90      $4,834.80        $402.90        $805.80                      
MAR 2009                                                   $5,067.00      $5,573.70      $6,080.40        $506.70      $1,013.40                      
APR 2009                                                   $4,653.00      $5,118.30      $5,583.60        $465.30        $930.60                      
MAY 2009                                                   $2,091.00      $2,300.10      $2,509.20        $209.10        $418.20                      
JUN 2009                                                   $1,140.00      $1,254.00      $1,368.00        $114.00        $228.00                      
JUL 2009                                                   $2,268.00      $2,494.80      $2,721.60        $226.80        $453.60                      
AUG 2009                                                   $2,115.00      $2,326.50      $2,538.00        $211.50        $423.00                      
SEP 2009                                                   $2,073.00      $2,280.30      $2,487.60        $207.30        $414.60                      
OCT 2009                                                   $3,090.00      $3,399.00      $3,708.00        $309.00        $618.00                      
NOV 2009                                                   $2,949.00      $3,243.90      $3,538.80        $294.90        $589.80                      
DEC 2009                                                   $2,208.00      $2,428.80      $2,649.60        $220.80        $441.60                      

12 rows selected.

SQL> -- ... insert lab 11 commands here ...
SQL> 
SQL> SELECT   TO_CHAR(9999,'$9,999,999.00') AS "Formatted"
  2  FROM     dual;

Formatted                                                                                                                                             
--------------                                                                                                                                        
     $9,999.00                                                                                                                                        

1 row selected.

SQL> 
SQL> SPOOL OFF
