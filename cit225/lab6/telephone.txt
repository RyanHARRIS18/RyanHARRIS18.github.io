SQL> 
SQL> -- Set SQL*Plus environmnet variables.
SQL> SET ECHO ON
SQL> SET FEEDBACK ON
SQL> SET NULL '<Null>'
SQL> SET PAGESIZE 999
SQL> SET SERVEROUTPUT ON SIZE UNLIMITED
SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  Create and assign bind variable for table name.
SQL> -- ------------------------------------------------------------------
SQL> VARIABLE table_name     VARCHAR2(30)
SQL> 
SQL> BEGIN
  2    :table_name := UPPER('telephone');
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> 
SQL> --  Verify table name.
SQL> SELECT :table_name FROM dual;

:TABLE_NAME                                                                     
--------------------------------                                                
TELEPHONE                                                                       

1 row selected.

SQL> 
SQL> -- ------------------------------------------------------------------
SQL> --  Conditionally drop table.
SQL> -- ------------------------------------------------------------------
SQL> DECLARE
  2    /* Dynamic cursor. */
  3    CURSOR c (cv_object_name VARCHAR2) IS
  4  	 SELECT o.object_type
  5  	 ,	o.object_name
  6  	 FROM	user_objects o
  7  	 WHERE	o.object_name LIKE UPPER(cv_object_name||'%');
  8  BEGIN
  9    FOR i IN c(:table_name) LOOP
 10  	 IF i.object_type = 'SEQUENCE' THEN
 11  	   EXECUTE IMMEDIATE 'DROP '||i.object_type||' '||i.object_name;
 12  	 ELSIF i.object_type = 'TABLE' THEN
 13  	   EXECUTE IMMEDIATE 'DROP '||i.object_type||' '||i.object_name||' CASCADE CONSTRAINTS';
 14  	 END IF;
 15    END LOOP;
 16  END;
 17  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Create table.
SQL> CREATE TABLE telephone
  2  ( telephone_id		   NUMBER
  3  , contact_id		   NUMBER	CONSTRAINT nn_telephone_1 NOT NULL
  4  , address_id		   NUMBER
  5  , telephone_type		   NUMBER	CONSTRAINT nn_telephone_2 NOT NULL
  6  , country_code		   VARCHAR2(3)	CONSTRAINT nn_telephone_3 NOT NULL
  7  , area_code		   VARCHAR2(6)	CONSTRAINT nn_telephone_4 NOT NULL
  8  , telephone_number 	   VARCHAR2(10) CONSTRAINT nn_telephone_5 NOT NULL
  9  , created_by		   NUMBER	CONSTRAINT nn_telephone_6 NOT NULL
 10  , creation_date		   DATE 	CONSTRAINT nn_telephone_7 NOT NULL
 11  , last_updated_by		   NUMBER	CONSTRAINT nn_telephone_8 NOT NULL
 12  , last_update_date 	   DATE 	CONSTRAINT nn_telephone_9 NOT NULL
 13  , CONSTRAINT pk_telephone_1   PRIMARY KEY(telephone_id)
 14  , CONSTRAINT fk_telephone_1   FOREIGN KEY(contact_id) REFERENCES contact(contact_id)
 15  , CONSTRAINT fk_telephone_2   FOREIGN KEY(telephone_type) REFERENCES common_lookup(common_lookup_id)
 16  , CONSTRAINT fk_telephone_3   FOREIGN KEY(created_by) REFERENCES system_user(system_user_id)
 17  , CONSTRAINT fk_telephone_4   FOREIGN KEY(last_updated_by) REFERENCES system_user(system_user_id));

Table created.

SQL> 
SQL> -- Display the table organization.
SQL> SET NULL ''
SQL> COLUMN table_name	 FORMAT A16
SQL> COLUMN column_id	 FORMAT 9999
SQL> COLUMN column_name  FORMAT A22
SQL> COLUMN data_type	 FORMAT A12
SQL> SELECT   table_name
  2  ,	      column_id
  3  ,	      column_name
  4  ,	      CASE
  5  		WHEN nullable = 'N' THEN 'NOT NULL'
  6  		ELSE ''
  7  	      END AS nullable
  8  ,	      CASE
  9  		WHEN data_type IN ('CHAR','VARCHAR2','NUMBER') THEN
 10  		  data_type||'('||data_length||')'
 11  		ELSE
 12  		  data_type
 13  	      END AS data_type
 14  FROM     user_tab_columns
 15  WHERE    table_name = :table_name
 16  ORDER BY 2;

                           Column                                               
Table Name       COLUMN_ID Name                   NULLABLE DATA_TYPE            
---------------- --------- ---------------------- -------- ------------         
TELEPHONE                1 TELEPHONE_ID           NOT NULL NUMBER(22)           
TELEPHONE                2 CONTACT_ID             NOT NULL NUMBER(22)           
TELEPHONE                3 ADDRESS_ID                      NUMBER(22)           
TELEPHONE                4 TELEPHONE_TYPE         NOT NULL NUMBER(22)           
TELEPHONE                5 COUNTRY_CODE           NOT NULL VARCHAR2(3)          
TELEPHONE                6 AREA_CODE              NOT NULL VARCHAR2(6)          
TELEPHONE                7 TELEPHONE_NUMBER       NOT NULL VARCHAR2(10)         
TELEPHONE                8 CREATED_BY             NOT NULL NUMBER(22)           
TELEPHONE                9 CREATION_DATE          NOT NULL DATE                 
TELEPHONE               10 LAST_UPDATED_BY        NOT NULL NUMBER(22)           
TELEPHONE               11 LAST_UPDATE_DATE       NOT NULL DATE                 

11 rows selected.

SQL> 
SQL> -- Display non-unique constraints.
SQL> COLUMN constraint_name   FORMAT A22
SQL> COLUMN search_condition  FORMAT A36
SQL> COLUMN constraint_type   FORMAT A1
SQL> SELECT   uc.constraint_name
  2  ,	      uc.search_condition
  3  ,	      uc.constraint_type
  4  FROM     user_constraints uc INNER JOIN user_cons_columns ucc
  5  ON       uc.table_name = ucc.table_name
  6  AND      uc.constraint_name = ucc.constraint_name
  7  WHERE    uc.table_name = :table_name
  8  AND      uc.constraint_type IN (UPPER('c'),UPPER('p'))
  9  ORDER BY uc.constraint_type DESC
 10  ,	      uc.constraint_name;

                                                            C                   
Constraint Name        Search Condition                     T                   
---------------------- ------------------------------------ -                   
PK_TELEPHONE_1                                              P                   
NN_TELEPHONE_1         "CONTACT_ID" IS NOT NULL             C                   
NN_TELEPHONE_2         "TELEPHONE_TYPE" IS NOT NULL         C                   
NN_TELEPHONE_3         "COUNTRY_CODE" IS NOT NULL           C                   
NN_TELEPHONE_4         "AREA_CODE" IS NOT NULL              C                   
NN_TELEPHONE_5         "TELEPHONE_NUMBER" IS NOT NULL       C                   
NN_TELEPHONE_6         "CREATED_BY" IS NOT NULL             C                   
NN_TELEPHONE_7         "CREATION_DATE" IS NOT NULL          C                   
NN_TELEPHONE_8         "LAST_UPDATED_BY" IS NOT NULL        C                   
NN_TELEPHONE_9         "LAST_UPDATE_DATE" IS NOT NULL       C                   

10 rows selected.

SQL> 
SQL> -- Display foreign key constraints.
SQL> COL constraint_source FORMAT A38 HEADING "Constraint Name:| Table.Column"
SQL> COL references_column FORMAT A40 HEADING "References:| Table.Column"
SQL> SELECT   uc.constraint_name||CHR(10)
  2  ||      '('||ucc1.table_name||'.'||ucc1.column_name||')' constraint_source
  3  ,	     'REFERENCES'||CHR(10)
  4  ||      '('||ucc2.table_name||'.'||ucc2.column_name||')' references_column
  5  FROM     user_constraints uc
  6  ,	      user_cons_columns ucc1
  7  ,	      user_cons_columns ucc2
  8  WHERE    uc.constraint_name = ucc1.constraint_name
  9  AND      uc.r_constraint_name = ucc2.constraint_name
 10  AND      ucc1.position = ucc2.position -- Correction for multiple column primary keys.
 11  AND      uc.constraint_type = 'R'
 12  AND      ucc1.table_name = :table_name
 13  ORDER BY ucc1.table_name
 14  ,	      uc.constraint_name;

Constraint Name:                       References:                              
 Table.Column                           Table.Column                            
-------------------------------------- ---------------------------------------- 
FK_TELEPHONE_1                         REFERENCES                               
(TELEPHONE.CONTACT_ID)                 (CONTACT.CONTACT_ID)                     
                                                                                
FK_TELEPHONE_2                         REFERENCES                               
(TELEPHONE.TELEPHONE_TYPE)             (COMMON_LOOKUP.COMMON_LOOKUP_ID)         
                                                                                
FK_TELEPHONE_3                         REFERENCES                               
(TELEPHONE.CREATED_BY)                 (SYSTEM_USER.SYSTEM_USER_ID)             
                                                                                
FK_TELEPHONE_4                         REFERENCES                               
(TELEPHONE.LAST_UPDATED_BY)            (SYSTEM_USER.SYSTEM_USER_ID)             
                                                                                

4 rows selected.

SQL> 
SQL> -- Create non-unique indexes.
SQL> CREATE INDEX telephone_n1 ON telephone(contact_id,address_id);

Index created.

SQL> CREATE INDEX telephone_n2 ON telephone(address_id);

Index created.

SQL> CREATE INDEX telephone_n3 ON telephone(telephone_type);

Index created.

SQL> 
SQL> -- Display the non-unique index.
SQL> COLUMN sequence_name   FORMAT A22 HEADING "Sequence Name"
SQL> COLUMN column_position FORMAT 999 HEADING "Column|Position"
SQL> COLUMN column_name     FORMAT A22 HEADING "Column|Name"
SQL> SELECT   ui.index_name
  2  ,	      uic.column_position
  3  ,	      uic.column_name
  4  FROM     user_indexes ui INNER JOIN user_ind_columns uic
  5  ON       ui.index_name = uic.index_name
  6  AND      ui.table_name = uic.table_name
  7  WHERE    ui.table_name = :table_name
  8  AND NOT  ui.index_name IN (SELECT constraint_name
  9  				FROM   user_constraints)
 10  ORDER BY ui.index_name
 11  ,	      uic.column_position;

                       Column Column                                            
Index Name           Position Name                                              
-------------------- -------- ----------------------                            
TELEPHONE_N1                1 CONTACT_ID                                        
TELEPHONE_N1                2 ADDRESS_ID                                        
TELEPHONE_N2                1 ADDRESS_ID                                        
TELEPHONE_N3                1 TELEPHONE_TYPE                                    

4 rows selected.

SQL> 
SQL> -- Create sequence.
SQL> CREATE SEQUENCE telephone_s1 START WITH 1001 NOCACHE;

Sequence created.

SQL> 
SQL> -- Display sequence value.
SQL> COLUMN sequence_name FORMAT A20 HEADING "Sequence Name"
SQL> SELECT   sequence_name
  2  FROM     user_sequences
  3  WHERE    sequence_name = :table_name||'_S1';

Sequence Name                                                                   
--------------------                                                            
TELEPHONE_S1                                                                    

1 row selected.

SQL> 
SQL> -- Close the log file.
SQL> SPOOL OFF
